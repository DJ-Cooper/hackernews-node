Milestone: completed "Adding a Database"
Next chapter: "Connect Server + DB with Prisma Client"

PROCESS:
1. Extend GraphQL schema definition with a new root field
    (and data types)
2. Implement resolver functions for added fields 

typeDefs
defines GraphQL schema

resolvers
implementation of GraphQL schema

Every resolver function receives 4 input args.
    parent: result of previous resolver execution level
        (nested curly brace levels)

On the first level, invokes 'feed' resolver & returns
data stored in 'links'. For 2nd level, server invokes 
resolvers of Link type, inferred from schema.
Because the implementation of Link resolvers is trivial,
they can be omitted.

The implementation of the 'post' resolver first creates
a new 'link' object, then adds it to the existing 
'links' list and final returns the new link.

prisma.yml
main config for prisma setup

datamodel.prisma
definition of datamodel, each model mapped to table
in underlying database.

Because Prisma uses GraphQL SDL for model definitions,
you can basically copy the existing Link definition from
schema.graphql into datamodel.prisma.

@id 
This means Prisma will auto-generate and store globally unique IDs 

@createdAt
read-only in API, stores time for when specific Link was created. 

>>>> yarn global add prisma <<<<<<<<<<<<<
prisma deploy
prisma generate

The last step is to generate the Prisma client for your datamodel. 
The Prisma client is an auto-generated client library that lets you 
read and write data in the database through Prisma API. You can 
generate it using the prisma generate command. This command reads
the information from prisma.yml and generates the Prisma client
accordingly.

The Prisma client is now generated and located in 
hackernews-node/src/generated/prisma-client .
To use the client, you can import the prisma instance that's exported
from the generated folder.
